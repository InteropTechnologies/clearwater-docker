#!/usr/bin/python -u
"""
Generate K8s config from template files
"""

import argparse
import os
import re
import subprocess

def parse_file(args, input_file, output_file):
    with open(input_file) as file:
        input_data = file.read()

    output_data = input_data.replace("{{IMAGE_PATH}}", args.image_path).replace("{{IMAGE_TAG}}", args.image_tag)

    with open(output_file, "w") as file:
        file.write(output_data)

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument(
            '--husk', action="store_true",
            help='Include Husk node (and exclude homestead-prov, cassandra and ellis)')
    parser.add_argument(
            '--cc', action="store_true", 
            help='Use nodes that would be present in CC (excludes bono and ellis)')
    parser.add_argument(
            '--image_path', required=True,
            help='The path to the images to use')
    parser.add_argument(
            '--image_tag', required=True, 
            help='The image tag to use')
    args = parser.parse_args()

    template_dir = "templates"

    for template_file_name in os.listdir(template_dir):
        template_name = template_file_name.split('.')[0]
         
        k8s_cfg_file_name = template_name + ".yaml"

        if ((template_name in ["husk-svc", "husk-depl"]) and not args.husk):
            print("Skip Husk")
            continue
        elif ((template_name in ["homestead-prov-svc", "homestead-prov-depl", "cassandra-svc", "cassandra-depl", "ellis-svc", "ellis-depl"]) and args.husk):
            print("Skipping homestead-prov related services")
            continue
        elif ((template_name in ["bono-svc", "bono-depl", "ellis-svc", "ellis-depl"]) and args.cc):
            print("Skip PC template_names")
            continue

        print("%s -> %s" % (template_file_name, k8s_cfg_file_name))  

        parse_file(args, os.path.join(template_dir, template_file_name), template_name+".yaml")

 


